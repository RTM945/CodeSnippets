package main

import (
	"bytes"
	"crypto/rand"
	"encoding/base64"
	"encoding/binary"
	"fmt"
	"io"
	"net"
	"reares/pkg/rc4"
	"reares/pkg/rsa"
)

func main() {
	//logic.Init()
	//acceptor := io.NewAcceptor("127.0.0.1", "18290")
	//err := acceptor.Start()
	//if err != nil {
	//	log.Fatal(err)
	//}
	listener, err := net.Listen("tcp", ":8080")
	if err != nil {
		panic(err)
		return
	}
	defer listener.Close()
	println("Server is running on port 8080")

	for {
		conn, err := listener.Accept()
		if err != nil {
			fmt.Println("Error accepting connection:", err)
			continue
		}
		go handleConnection(conn)
	}
}

func handleConnection(conn net.Conn) {
	defer conn.Close()
	println("recv conn from:", conn.RemoteAddr().String())
	// RSA KEY EXCHANGE
	session := &Session{
		rsa: rsa.GetInstance(),
	}
	encoded, err := session.rsa.GetPublicKeyEncoded()
	if err != nil {
		println(err)
		return
	}
	send := make([]byte, 8)
	// length
	binary.BigEndian.PutUint32(send[:4], uint32(len(encoded)))
	// typeId
	binary.BigEndian.PutUint32(send[4:8], 1)
	send = append(send, encoded...)
	_, _ = conn.Write(send)
	println("send rsa key to ", conn.RemoteAddr().String())
	byteBuf := bytes.NewBuffer(make([]byte, 0, 1024))

	for {
		buffer := make([]byte, 1024)
		n, err := conn.Read(buffer)
		if err != nil {
			if err != io.EOF {
				println(err)
			}
			break
		}
		if n == 0 {
			continue
		}
		buffer = buffer[:n]
		if session.securityDecoder != nil {
			// 流加密解密
			session.securityDecoder.DoUpdate(buffer)
			println("decode success:", conn.RemoteAddr().String())
		}
		byteBuf.Write(buffer[:n])
		println("=============================================")
		println("recv frame from:", conn.RemoteAddr().String())

		if byteBuf.Len() < 4 {
			continue
		}
		frameLength := binary.BigEndian.Uint32(byteBuf.Bytes()[:4])
		if byteBuf.Len() < int(frameLength)+4 {
			continue
		}

		frame := byteBuf.Next(int(frameLength) + 8)
		typeId := binary.BigEndian.Uint32(frame[4:8])
		switch typeId {
		case 1:
			// RSA KEY EXCHANGE
			clientPublicKey := frame[8:]
			key := randomKey(32)
			encodedKey := make([]byte, base64.StdEncoding.EncodedLen(len(key)))
			base64.StdEncoding.Encode(encodedKey, key)
			session.securityDecoder = rc4.NewRC4(encodedKey)
			fmt.Println("serverKey:", key)
			println("recv rsa key from:", conn.RemoteAddr().String())
			encrypt, err := rsa.Encrypt(clientPublicKey, encodedKey)
			if err != nil {
				println(err)
				return
			}
			send := make([]byte, 8)
			// length
			binary.BigEndian.PutUint32(send[:4], uint32(len(encrypt)))
			// typeId
			binary.BigEndian.PutUint32(send[4:8], 2)
			send = append(send, encrypt...)
			_, _ = conn.Write(send)
			println("send rsa key to:", conn.RemoteAddr().String())
		case 2:
			// KEY EXCHANGE
			encrypt := frame[8:]
			clientKey, err := rsa.Decrypt(session.rsa.GetPrivateKey(), encrypt)
			if err != nil {
				println(err)
				return
			}
			fmt.Println("clientKey:", clientKey)
			session.securityEncoder = rc4.NewRC4(clientKey)
			println("recv key from:", conn.RemoteAddr().String())
			msg := []byte("丢弃 byteBuf 中已读完的数据的时机\n你可以在以下时机安全地丢弃已经读取并处理完的数据：\n\n1. 数据读取和解密之后\n当你通过 frame := make([]byte, int(frameLength)+4) 将数据从 byteBuf 中读取到 frame 中并进行处理（例如解密、解码等）后，数据已经不再需要在 byteBuf 中保留。此时你可以丢弃 byteBuf 中的已处理数据。\n\n具体来说，byteBuf.Read(frame) 将从 byteBuf 中读取数据填充到 frame 中。此时，你已经读取了帧数据并且不再需要这些数据在缓冲区中。为了避免内存膨胀，可以使用 bytes.Buffer 的 Next 或 Read 方法来安全丢弃已读数据。\n\n2. 使用 Next 方法丢弃已处理的数据\nbytes.Buffer 提供了 Next(n int) 方法，它会返回当前缓冲区的前 n 字节，并将这些字节从缓冲区中移除。这是一个非常适合丢弃已读数据的方式。\n\n你可以在处理完当前帧数据后，使用 Next 方法丢弃 byteBuf 中的已处理部分。前面的句号哪去了？")
			send := make([]byte, 8)
			// length
			binary.BigEndian.PutUint32(send[:4], uint32(len(msg)))
			// typeId
			binary.BigEndian.PutUint32(send[4:8], 3)
			send = append(send, msg...)
			session.securityDecoder.DoUpdate(send)
			println("encode success:", conn.RemoteAddr().String())
			_, _ = conn.Write(send)
			println("send hello to:", conn.RemoteAddr().String())
		}
	}
}

type Session struct {
	rsa             *rsa.Key
	securityDecoder *rc4.RC4
	securityEncoder *rc4.RC4
}

func randomKey(size int) []byte {
	//res := make([]byte, size)
	//str := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	//for i := 0; i < size; i++ {
	//	n, err := rand.Int(rand.Reader, big.NewInt(int64(len(str))))
	//	if err != nil {
	//		return nil
	//	}
	//	res[i] = str[n.Int64()]
	//}
	//return res
	res := make([]byte, size)
	rand.Read(res)
	return res
}
